import Foundation

/// Represents an article generated by SemanticPen
public struct Article: Codable {
    /// Unique identifier for the article
    public let id: String
    
    /// Title of the article
    public let title: String?
    
    /// Content of the article
    public let content: String?
    
    /// Current status of the article
    public let status: String
    
    /// Progress percentage (0-100)
    public let progress: Int
    
    /// Target keyword for the article
    public let targetKeyword: String
    
    /// Project name associated with the article
    public let projectName: String?
    
    /// Creation timestamp
    public let createdAt: Date?
    
    /// Last update timestamp
    public let updatedAt: Date?
    
    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case content
        case status
        case progress
        case targetKeyword = "target_keyword"
        case projectName = "project_name"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
    
    /// Check if the article is completed
    public var isCompleted: Bool {
        return status == "completed"
    }
    
    /// Check if the article is in progress
    public var isInProgress: Bool {
        return status == "in_progress" || status == "processing"
    }
    
    /// Check if the article has failed
    public var hasFailed: Bool {
        return status == "failed" || status == "error"
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        id = try container.decode(String.self, forKey: .id)
        title = try container.decodeIfPresent(String.self, forKey: .title)
        content = try container.decodeIfPresent(String.self, forKey: .content)
        status = try container.decode(String.self, forKey: .status)
        progress = try container.decode(Int.self, forKey: .progress)
        targetKeyword = try container.decode(String.self, forKey: .targetKeyword)
        projectName = try container.decodeIfPresent(String.self, forKey: .projectName)
        
        // Handle date parsing
        let dateFormatter = ISO8601DateFormatter()
        if let createdAtString = try container.decodeIfPresent(String.self, forKey: .createdAt) {
            createdAt = dateFormatter.date(from: createdAtString)
        } else {
            createdAt = nil
        }
        
        if let updatedAtString = try container.decodeIfPresent(String.self, forKey: .updatedAt) {
            updatedAt = dateFormatter.date(from: updatedAtString)
        } else {
            updatedAt = nil
        }
    }
}

/// Response from article generation API
public struct GenerateArticleResponse: Codable {
    /// Whether the request was successful
    public let success: Bool
    
    /// Response message
    public let message: String
    
    /// Array of generated article IDs
    public let articleIds: [String]?
    
    /// Single article ID (for backward compatibility)
    public let articleId: String?
    
    /// Error code if the request failed
    public let errorCode: String?
    
    private enum CodingKeys: String, CodingKey {
        case success
        case message
        case articleIds = "article_ids"
        case articleId = "article_id"
        case errorCode = "error_code"
    }
    
    /// Check if the response has article IDs
    public var hasArticleIds: Bool {
        return !(articleIds?.isEmpty ?? true)
    }
    
    /// Get the first article ID
    public var firstArticleId: String? {
        return articleIds?.first ?? articleId
    }
    
    /// Get all article IDs (including single articleId)
    public var allArticleIds: [String] {
        var ids: [String] = []
        if let articleIds = articleIds {
            ids.append(contentsOf: articleIds)
        }
        if let articleId = articleId, !ids.contains(articleId) {
            ids.append(articleId)
        }
        return ids
    }
}

/// Response from article retrieval API
public struct GetArticleResponse: Codable {
    /// Whether the request was successful
    public let success: Bool
    
    /// Response message
    public let message: String
    
    /// The retrieved article
    public let article: Article?
    
    /// Error code if the request failed
    public let errorCode: String?
    
    private enum CodingKeys: String, CodingKey {
        case success
        case message
        case article
        case errorCode = "error_code"
    }
}