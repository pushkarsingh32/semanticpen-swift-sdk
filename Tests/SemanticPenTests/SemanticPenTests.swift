import XCTest
@testable import SemanticPen

@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
final class SemanticPenTests: XCTestCase {
    
    func testConfigurationInit() {
        let config = Configuration(apiKey: "test-key")
        
        XCTAssertEqual(config.apiKey, "test-key")
        XCTAssertEqual(config.baseURL.absoluteString, "https://www.semanticpen.com")
        XCTAssertEqual(config.timeoutInterval, 60)
    }
    
    func testConfigurationCustomInit() {
        let customURL = URL(string: "https://api.example.com")!
        let config = Configuration(
            apiKey: "custom-key",
            baseURL: customURL,
            timeoutInterval: 30
        )
        
        XCTAssertEqual(config.apiKey, "custom-key")
        XCTAssertEqual(config.baseURL, customURL)
        XCTAssertEqual(config.timeoutInterval, 30)
    }
    
    func testClientInit() {
        let client = SemanticPenClient(apiKey: "test-key")
        XCTAssertNotNil(client)
    }
    
    func testArticleModel() {
        let json = """
        {
            "id": "test-123",
            "title": "Test Article",
            "content": "Test content",
            "status": "completed",
            "progress": 100,
            "target_keyword": "test keyword",
            "project_name": "Test Project",
            "created_at": "2023-01-01T12:00:00Z",
            "updated_at": "2023-01-01T13:00:00Z"
        }
        """.data(using: .utf8)!
        
        let decoder = JSONDecoder()
        
        do {
            let article = try decoder.decode(Article.self, from: json)
            
            XCTAssertEqual(article.id, "test-123")
            XCTAssertEqual(article.title, "Test Article")
            XCTAssertEqual(article.content, "Test content")
            XCTAssertEqual(article.status, "completed")
            XCTAssertEqual(article.progress, 100)
            XCTAssertEqual(article.targetKeyword, "test keyword")
            XCTAssertEqual(article.projectName, "Test Project")
            XCTAssertTrue(article.isCompleted)
            XCTAssertFalse(article.isInProgress)
            XCTAssertFalse(article.hasFailed)
            XCTAssertNotNil(article.createdAt)
            XCTAssertNotNil(article.updatedAt)
        } catch {
            XCTFail("Failed to decode article: \(error)")
        }
    }
    
    func testArticleStatusChecks() {
        // Test completed status
        let completedJson = """
        {
            "id": "1",
            "status": "completed",
            "progress": 100,
            "target_keyword": "test"
        }
        """.data(using: .utf8)!
        
        let completedArticle = try! JSONDecoder().decode(Article.self, from: completedJson)
        XCTAssertTrue(completedArticle.isCompleted)
        XCTAssertFalse(completedArticle.isInProgress)
        XCTAssertFalse(completedArticle.hasFailed)
        
        // Test in progress status
        let inProgressJson = """
        {
            "id": "2",
            "status": "in_progress",
            "progress": 50,
            "target_keyword": "test"
        }
        """.data(using: .utf8)!
        
        let inProgressArticle = try! JSONDecoder().decode(Article.self, from: inProgressJson)
        XCTAssertFalse(inProgressArticle.isCompleted)
        XCTAssertTrue(inProgressArticle.isInProgress)
        XCTAssertFalse(inProgressArticle.hasFailed)
        
        // Test failed status
        let failedJson = """
        {
            "id": "3",
            "status": "failed",
            "progress": 0,
            "target_keyword": "test"
        }
        """.data(using: .utf8)!
        
        let failedArticle = try! JSONDecoder().decode(Article.self, from: failedJson)
        XCTAssertFalse(failedArticle.isCompleted)
        XCTAssertFalse(failedArticle.isInProgress)
        XCTAssertTrue(failedArticle.hasFailed)
    }
    
    func testGenerateArticleResponse() {
        let json = """
        {
            "success": true,
            "message": "Article generation started",
            "article_ids": ["id1", "id2"],
            "article_id": "id1"
        }
        """.data(using: .utf8)!
        
        let decoder = JSONDecoder()
        
        do {
            let response = try decoder.decode(GenerateArticleResponse.self, from: json)
            
            XCTAssertTrue(response.success)
            XCTAssertEqual(response.message, "Article generation started")
            XCTAssertEqual(response.articleIds, ["id1", "id2"])
            XCTAssertEqual(response.articleId, "id1")
            XCTAssertTrue(response.hasArticleIds)
            XCTAssertEqual(response.firstArticleId, "id1")
            XCTAssertEqual(response.allArticleIds, ["id1", "id2"])
        } catch {
            XCTFail("Failed to decode response: \(error)")
        }
    }
    
    func testGetArticleResponse() {
        let json = """
        {
            "success": true,
            "message": "Article retrieved",
            "article": {
                "id": "test-123",
                "title": "Test Article",
                "status": "completed",
                "progress": 100,
                "target_keyword": "test"
            }
        }
        """.data(using: .utf8)!
        
        let decoder = JSONDecoder()
        
        do {
            let response = try decoder.decode(GetArticleResponse.self, from: json)
            
            XCTAssertTrue(response.success)
            XCTAssertEqual(response.message, "Article retrieved")
            XCTAssertNotNil(response.article)
            XCTAssertEqual(response.article?.id, "test-123")
            XCTAssertEqual(response.article?.title, "Test Article")
        } catch {
            XCTFail("Failed to decode response: \(error)")
        }
    }
    
    func testErrorTypes() {
        // Test ValidationError
        let validationError = ValidationError(message: "Invalid input")
        XCTAssertEqual(validationError.errorCode, "VALIDATION_ERROR")
        XCTAssertEqual(validationError.message, "Invalid input")
        XCTAssertEqual(validationError.httpStatusCode, 400)
        
        // Test AuthenticationError
        let authError = AuthenticationError()
        XCTAssertEqual(authError.errorCode, "AUTHENTICATION_ERROR")
        XCTAssertEqual(authError.message, "Invalid API key")
        XCTAssertEqual(authError.httpStatusCode, 401)
        
        // Test NetworkError
        let networkError = NetworkError(message: "Connection failed", httpStatusCode: 500)
        XCTAssertEqual(networkError.errorCode, "NETWORK_ERROR")
        XCTAssertEqual(networkError.message, "Connection failed")
        XCTAssertEqual(networkError.httpStatusCode, 500)
        
        // Test RateLimitError
        let rateLimitError = RateLimitError(retryAfter: 60)
        XCTAssertEqual(rateLimitError.errorCode, "RATE_LIMIT_ERROR")
        XCTAssertEqual(rateLimitError.message, "Rate limit exceeded")
        XCTAssertEqual(rateLimitError.httpStatusCode, 429)
        XCTAssertEqual(rateLimitError.retryAfter, 60)
        
        // Test APIError
        let apiError = APIError(message: "Server error", errorCode: "CUSTOM_ERROR", httpStatusCode: 500)
        XCTAssertEqual(apiError.errorCode, "CUSTOM_ERROR")
        XCTAssertEqual(apiError.message, "Server error")
        XCTAssertEqual(apiError.httpStatusCode, 500)
        
        // Test SDKError
        let sdkError = SDKError(message: "SDK error")
        XCTAssertEqual(sdkError.errorCode, "SDK_ERROR")
        XCTAssertEqual(sdkError.message, "SDK error")
        XCTAssertNil(sdkError.httpStatusCode)
    }
    
    func testVersion() {
        XCTAssertEqual(SemanticPen.version, "1.0.0")
    }
}